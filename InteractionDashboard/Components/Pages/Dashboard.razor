@page "/"
@using TVInteractionDashboard.Data
@inject TVInteractionContext _context
@using Telerik.Blazor.Components
@using Microsoft.EntityFrameworkCore
@using System.Globalization
@using PdfExportJS.Services
@using TVInteractionDashboard.Components

@inject DrawingService DrawingService


<h3 class="mb-4">📈 Analytics</h3>

<!-- FILTERS -->
<h5 class="mb-3">Time Range</h5>
<div class="d-flex flex-wrap gap-2 align-items-center mb-4">
    <TelerikDropDownList Data="@presetOptions"
                         TextField="Label"
                         ValueField="Value"
                         @bind-Value="selectedPreset"
                         Width="200px"
                         OnChange="@OnPresetChanged" />

    @if (selectedPreset == "custom")
    {
        <TelerikDateTimePicker @bind-Value="customStart" Width="220px" />
        <TelerikDateTimePicker @bind-Value="customEnd" Width="220px" />
    }

    <TelerikButton OnClick="@LoadChartsAsync" ThemeColor="Primary">Apply Filter</TelerikButton>
</div>

<!-- CARDS -->
<div class="kpi-card-grid mb-5">
    <div class="kpi-card">
        <h6>Total Interactions</h6>
        <p class="kpi-value @GetColorClass(totalInteractions, 15, 30)">
            @totalInteractions
        </p>
    </div>

    <div class="kpi-card">
        <h6>Average Duration (s)</h6>
        <p class="kpi-value @GetColorClass(avgDuration, 50, 100)">
            @avgDuration.ToString("0.0")
        </p>
    </div>
</div>

@* <div class="export-menu">
    <button class="menu-btn" @onclick="ToggleMenu">⋮</button>
    @if (showMenu)
    {
        <div class="menu-options">
            <button @onclick="ExportAsJPG">Export as JPG</button>
        </div>
    }
</div> *@

<!-- Line chart: INTERACTIONS PER DAY -->
<div class="d-flex justify-content-end mb-2">
    <ChartExportMenu TargetElement="@chart1Ref" />
</div>

<div class="chart-container mb-5" style="position: relative;" @ref="@chart1Ref">
    <TelerikChart>
        <ChartSeriesItems>
            <ChartSeries Type="ChartSeriesType.Line"
                         Name="Interactions"
                         Data="@interactionsPerDay"
                         Field="Value"
                         CategoryField="Label"
                         Color="#4e79a7">
                <ChartSeriesTooltip Visible="true" />
            </ChartSeries>
        </ChartSeriesItems>
        <ChartCategoryAxes>
            <ChartCategoryAxis>
                <ChartCategoryAxisTitle Text="Date" />
                <ChartCategoryAxisLabels>
                    <ChartCategoryAxisLabelsRotation Angle="45" />
                </ChartCategoryAxisLabels>
            </ChartCategoryAxis>
        </ChartCategoryAxes>
        <ChartValueAxes>
            <ChartValueAxis>
                <ChartValueAxisTitle Text="Interactions" />
            </ChartValueAxis>
        </ChartValueAxes>

        <ChartTitle Text="Interactions Per Day" />
        <ChartZoomable Enabled="true">
            <ChartZoomableMousewheel Enabled="true" Rate="0.4" />
            <ChartZoomableSelection Enabled="true" Key="@ChartZoomableSelectionKey.Ctrl" />
        </ChartZoomable>
        <ChartPannable Enabled="true" />
        <ChartSettings>
            <NoDataTemplate>
                <div><span style="font-size: 50px;">🔎</span><p><strong>No data available to display at this time range.</strong></p></div>
            </NoDataTemplate>
        </ChartSettings>
    </TelerikChart>
</div>

<!-- Line chart: AVG DURATION PER DAY -->
<div class="d-flex justify-content-end mb-2">
    <ChartExportMenu TargetElement="@chart2Ref" />
</div>
<div class="chart-container mb-5" style="position: relative;" @ref="@chart2Ref">
    <TelerikChart>
        <ChartSeriesItems>
            <ChartSeries Type="ChartSeriesType.Line"
                         Name="Average Duration"
                         Data="@avgDurationPerDay"
                         Field="Value"
                         CategoryField="Label">
                <ChartSeriesTooltip Visible="true" />
            </ChartSeries>
        </ChartSeriesItems>
        <ChartCategoryAxes>
            <ChartCategoryAxis>
                <ChartCategoryAxisTitle Text="Date" />
                <ChartCategoryAxisLabels>
                    <ChartCategoryAxisLabelsRotation Angle="45" />
                </ChartCategoryAxisLabels>
            </ChartCategoryAxis>
        </ChartCategoryAxes>
        <ChartValueAxes>
            <ChartValueAxis>
                <ChartValueAxisTitle Text="Average Duration (s)" />
            </ChartValueAxis>
        </ChartValueAxes>

        <ChartTitle Text="Average Viewing Duration Per Day (seconds)" />
        <ChartZoomable Enabled="true">
            <ChartZoomableMousewheel Enabled="true" Rate="0.4" />
            <ChartZoomableSelection Enabled="true" Key="@ChartZoomableSelectionKey.Ctrl" />
        </ChartZoomable>
        <ChartPannable Enabled="true" />
        <ChartSettings>
            <NoDataTemplate>
                <div><span style="font-size: 50px;">🔎</span><p><strong>No data available to display at this time range.</strong></p></div>
            </NoDataTemplate>
        </ChartSettings>
    </TelerikChart>
</div>

<!-- Bar chart: Interactions by TV Unit -->
<div class="d-flex justify-content-end mb-2">
    <ChartExportMenu TargetElement="@chart3Ref" />
</div>
<div class="chart-container mb-5" style="position: relative;" @ref="@chart3Ref">
    <TelerikChart>
        <ChartSeriesItems>
            <ChartSeries Type="ChartSeriesType.Column"
                         Name="Left"
                         Data="@interactionsByUnit.Where(x => x.Label == "Left")"
                         Field="Value"
                         CategoryField="Label"
                         Color="#4e79a7" />
            <ChartSeries Type="ChartSeriesType.Column"
                         Name="Center"
                         Data="@interactionsByUnit.Where(x => x.Label == "Center")"
                         Field="Value"
                         CategoryField="Label"
                         Color="#f28e2b" />
            <ChartSeries Type="ChartSeriesType.Column"
                         Name="Right"
                         Data="@interactionsByUnit.Where(x => x.Label == "Right")"
                         Field="Value"
                         CategoryField="Label"
                         Color="#76b7b2" />
        </ChartSeriesItems>
        <ChartCategoryAxes>
            <ChartCategoryAxis>
                <ChartCategoryAxisTitle Text="TV Position" />
            </ChartCategoryAxis>
        </ChartCategoryAxes>
        <ChartValueAxes>
            <ChartValueAxis>
                <ChartValueAxisTitle Text="Interactions" />
            </ChartValueAxis>
        </ChartValueAxes>

        <ChartTitle Text="Interactions by TV Unit" />
        <ChartLegend Position="ChartLegendPosition.Top" />
        <ChartTooltip Visible="true" />
        <ChartSettings>
            <NoDataTemplate>
                <div><span style="font-size: 50px;">🔎</span><p><strong>No data available to display at this time range.</strong></p></div>
            </NoDataTemplate>
        </ChartSettings>
    </TelerikChart>
</div>


<!-- COMBO CHART -->
<div class="d-flex justify-content-end mb-2">
    <ChartExportMenu TargetElement="@comboChartRef" />
</div>
<div class="chart-container mb-5" style="position: relative;" @ref="@comboChartRef">
    <TelerikChart>
        <ChartSeriesItems>
            <ChartSeries Type="ChartSeriesType.Column"
                         Name="Interactions"
                         Data="@comboData"
                         Field="Interactions"
                         CategoryField="Label"
                         Color="#4e79a7" />
            <ChartSeries Type="ChartSeriesType.Column"
                         Name="Average Duration (s)"
                         Data="@comboData"
                         Field="AvgDuration"
                         CategoryField="Label"
                         Color="#f28e2b" />
        </ChartSeriesItems>
        <ChartCategoryAxes>
            <ChartCategoryAxis Categories="@comboData.Select(x => x.Label).ToArray()">
                <ChartCategoryAxisTitle Text="Date" />
                <ChartCategoryAxisLabels>
                    <ChartCategoryAxisLabelsRotation Angle="45" />
                </ChartCategoryAxisLabels>
            </ChartCategoryAxis>
        </ChartCategoryAxes>
        <ChartValueAxes>
            <ChartValueAxis>
                <ChartValueAxisTitle Text="Value" />
            </ChartValueAxis>
        </ChartValueAxes>
        <ChartLegend Position="ChartLegendPosition.Top" />
        <ChartTooltip Visible="true" />
        <ChartTitle Text="Interactions and Average Duration" />
        <ChartSettings>
            <NoDataTemplate>
                <div><span style="font-size: 50px;">🔎</span><p><strong>No data available to display at this time range.</strong></p></div>
            </NoDataTemplate>
        </ChartSettings>
    </TelerikChart>
</div>

<!-- HEATMAP -->
<div class="d-flex justify-content-end mb-2">
    <ChartExportMenu TargetElement="@heatmapRef" />
</div>
<div class="chart-container mb-5" style="position: relative;" @ref="@heatmapRef">
    <TelerikChart Width="100%" Height="400px">
        <ChartTitle Text="Peak Viewing Hours by Day" />
        <ChartLegend Position="@ChartLegendPosition.Bottom" />

        <ChartSeriesItems>
            <ChartSeries Type="ChartSeriesType.Heatmap"
                         Name="Interactions"
                         Color="#99ff94"
                         Data="@heatmapData"
                         XField="@nameof(HeatmapData.Hour)"
                         YField="@nameof(HeatmapData.Day)"
                         Field="@nameof(HeatmapData.Value)"
                         ColorField="@nameof(HeatmapData.Color)">
                <ChartSeriesTooltip Visible="true">
                    <Template>
                        @{
                            var item = context.DataItem as HeatmapData;
                        }
                        <div>
                            @($"{item?.Value} interactions on {item?.Day} at {item?.Hour}:00")
                        </div>
                    </Template>
                </ChartSeriesTooltip>
                <ChartSeriesMarkers Type="ChartSeriesMarkersType.RoundedRect" BorderRadius="4" />
            </ChartSeries>
        </ChartSeriesItems>

        <ChartXAxes>
            <ChartXAxis>
                <ChartXAxisTitle Text="Hour of Day" />
                <ChartXAxisLabels Step="1" />
            </ChartXAxis>
        </ChartXAxes>

        <ChartYAxes>
            <ChartYAxis Categories="@yAxisCategories">
                <ChartYAxisTitle Text="Day of Week" />
            </ChartYAxis>
        </ChartYAxes>
        <ChartSettings>
            <NoDataTemplate>
                <div><span style="font-size: 50px;">🔎</span><p><strong>No data available to display at this time range.</strong></p></div>
            </NoDataTemplate>
        </ChartSettings>
    </TelerikChart>
</div>

@code {
    private int totalInteractions;
    private double avgDuration;
    private ElementReference chart1Ref;
    private ElementReference chart2Ref;
    private ElementReference chart3Ref;
    private ElementReference comboChartRef;
    private ElementReference heatmapRef;

    public class ChartPoint { public string Label { get; set; } public double Value { get; set; } }
    public class ComboChartPoint { public string Label { get; set; } public double Interactions { get; set; } public double AvgDuration { get; set; } }
    public class HeatmapData { public int Hour { get; set; } public string Day { get; set; } public int Value { get; set; } public string Color { get; set; } }

    private List<ChartPoint> interactionsPerDay = new();
    private List<ChartPoint> avgDurationPerDay = new();
    private List<ChartPoint> interactionsByUnit = new();
    private List<ComboChartPoint> comboData = new();
    private List<HeatmapData> heatmapData = new();
    object[] yAxisCategories = new object[] { "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun" };

    private string selectedPreset = "1h";
    private DateTime? customStart = DateTime.Now.AddHours(-1);
    private DateTime? customEnd = DateTime.Now;
    private DateTime? filterStart => selectedPreset == "custom" ? customStart : CalculatePresetStart();
    private DateTime? filterEnd => selectedPreset == "custom" ? customEnd : DateTime.Now;

    private List<PresetOption> presetOptions = new()
    {
        new() { Label = "Last 1 Hour", Value = "1h" },
        new() { Label = "Last 3 Hours", Value = "3h" },
        new() { Label = "Last 6 Hours", Value = "6h" },
        new() { Label = "Last 12 Hours", Value = "12h" },
        new() { Label = "Last 24 Hours", Value = "24h" },
        new() { Label = "Custom Range", Value = "custom" }
    };

    public class PresetOption { public string Label { get; set; } public string Value { get; set; } }

    private Task OnPresetChanged(object value)
    {
        selectedPreset = value?.ToString();
        return Task.CompletedTask;
    }

    private DateTime? CalculatePresetStart() => selectedPreset switch
    {
        "1h" => DateTime.Now.AddHours(-1),
        "3h" => DateTime.Now.AddHours(-3),
        "6h" => DateTime.Now.AddHours(-6),
        "12h" => DateTime.Now.AddHours(-12),
        "24h" => DateTime.Now.AddHours(-24),
        _ => null
    };

    private async Task LoadChartsAsync()
    {

        var query = _context.TV_Interactions.AsQueryable();

        if (filterStart.HasValue)
            query = query.Where(i => i.StartTime >= filterStart.Value);
        if (filterEnd.HasValue)
            query = query.Where(i => i.StartTime <= filterEnd.Value);

        totalInteractions = await query.CountAsync();
        avgDuration = await query.AverageAsync(i => (double?)i.Duration) ?? 0;

        interactionsPerDay = await query
            .GroupBy(i => i.StartTime.Date)
            .Select(g => new ChartPoint { Label = g.Key.ToString("MM/dd"), Value = g.Count() })
            .ToListAsync();

        avgDurationPerDay = await query
            .GroupBy(i => i.StartTime.Date)
            .Select(g => new ChartPoint { Label = g.Key.ToString("MM/dd"), Value = g.Average(x => (double)x.Duration) })
            .ToListAsync();

        interactionsByUnit = await (
            from i in query
            join u in _context.TV_Units on i.UnitID equals u.UnitID
            group i by u.TvPosition into g
            select new ChartPoint { Label = g.Key, Value = g.Count() })
            .ToListAsync();

        comboData = await query
            .GroupBy(i => i.StartTime.Date)
            .Select(g => new ComboChartPoint
            {
                Label = g.Key.ToString("MM/dd"),
                Interactions = g.Count(),
                AvgDuration = g.Average(x => (double)x.Duration)
            }).ToListAsync();

        await LoadHeatmapAsync();

    }

    private string GetHeatColor(int value)
    {
        if (value <= 2) return "#d9fcd7";
        else if (value <= 5) return "#99ff94";
        else if (value <= 10) return "#62fc5b";
        else return "#1aff0f";
    }

    private async Task LoadHeatmapAsync()
    {
        var query = _context.TV_Interactions.AsQueryable();

        if (filterStart.HasValue)
            query = query.Where(i => i.StartTime >= filterStart.Value);
        if (filterEnd.HasValue)
            query = query.Where(i => i.StartTime <= filterEnd.Value);

        var data = await query.ToListAsync();

        var grouped = data
            .GroupBy(i => new { i.StartTime.Hour, Day = i.StartTime.DayOfWeek.ToString().Substring(0, 3) })
            .Select(g =>
            {
                var count = g.Count();
                return new HeatmapData
                {
                    Hour = g.Key.Hour,
                    Day = g.Key.Day,
                    Value = count,
                    Color = GetHeatColor(count)
                };
            });

        heatmapData = grouped.ToList();
    }

    private string GetColorClass(double value, double lowThreshold, double highThreshold)
    {
        if (value < lowThreshold)
            return "value-low";
        else if (value < highThreshold)
            return "value-medium";
        else
            return "value-high";
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadChartsAsync();
    }
}
