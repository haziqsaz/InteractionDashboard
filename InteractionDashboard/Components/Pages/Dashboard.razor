@page "/"
@using TVInteractionDashboard.Data
@inject TVInteractionContext _context
@using Telerik.Blazor.Components
@using Telerik.Blazor.Components.Window
@using Microsoft.EntityFrameworkCore
@using System.Globalization
@using PdfExportJS.Services
@using TVInteractionDashboard.Components
@inject DrawingService DrawingService


<h3 class="mb-4">📈 Analytics</h3>

<h5 class="mb-3">Filters</h5>
<div class="d-flex flex-wrap gap-3 align-items-end mb-4">
    @* Plant filter *@
    <TelerikDropDownList Data="@plants"
                         TextField="Plant"
                         ValueField="PlantID"
                         Value="@selectedPlantId"
                         ValueChanged="@((int? val) => OnPlantChanged(val))"
                         Width="80px" >

        <DropDownListSettings>
            <DropDownListPopupSettings Height="auto" />
        </DropDownListSettings>
    </TelerikDropDownList>

    @* Location filter *@
    <TelerikDropDownList Data="@locations"
                         TextField="Location"
                         ValueField="LocationID"
                         @bind-Value="selectedLocationId"
                         Width="168px"
                         Enabled="@selectedPlantId.HasValue">

        <DropDownListSettings>
            <DropDownListPopupSettings Height="auto" />
        </DropDownListSettings>
    </TelerikDropDownList>

    @* Time filter *@
    <TelerikDropDownList Data="@presetOptions"
                         TextField="Label"
                         ValueField="Value"
                         @bind-Value="selectedPreset"
                         Width="150px"
                         OnChange="@OnPresetChanged" >

        <DropDownListSettings>
            <DropDownListPopupSettings Height="auto" />
        </DropDownListSettings>
    </TelerikDropDownList>

    @if (selectedPreset == "custom")
    {
        <TelerikDateTimePicker @bind-Value="customStart" Width="200px" />
        <TelerikDateTimePicker @bind-Value="customEnd" Width="200px" />
    }

    <TelerikButton OnClick="@LoadChartsAsync" ThemeColor="Primary">Apply</TelerikButton>
</div>

<TelerikCheckBox Id="includeZeroCheckBox"
                 Value="@IncludeZeroDates"
                 ValueChanged="@ValueChangedCallback" />
<label for="includeZeroCheckBox" class="ms-2">Include Dates with Zero Interactions</label>

@* Cards *@
<div class="kpi-card-grid mb-5">
    <div class="kpi-card">
        <h6>Total Interactions</h6>
        <p class="kpi-value @GetColorClass(totalInteractions, 20, 50)">
            @totalInteractions
        </p>
    </div>

    <div class="kpi-card">
        <h6>Average Duration Per Interaction (seconds)</h6>
        <p class="kpi-value @GetColorClass(avgDuration, 10, 15)">
            @((avgDuration).ToString("0"))
            @* Convert to Minutes--> class="kpi-value @GetColorClass(avgDuration / 60, 0.16, 0.5)">
            @((avgDuration / 60).ToString("0.00")) *@
        </p>
    </div>
</div>

@* Line chart: Interactions per Day *@
<div class="d-flex justify-content-end mb-2">
    <ChartExportMenu TargetElement="@chart1Ref" />
</div>

<div class="chart-container mb-5" style="position: relative;" @ref="@chart1Ref">
    <TelerikChart>
        <ChartSeriesItems>
            <ChartSeries Type="ChartSeriesType.Line"
                         Name="Interactions"
                         Data="@interactionsPerDay"
                         Field="Value"
                         CategoryField="Label"
                         Color="#0D66FF">
                <ChartSeriesTooltip Visible="true" />
            </ChartSeries>
        </ChartSeriesItems>
        <ChartCategoryAxes>
            <ChartCategoryAxis>
                <ChartCategoryAxisTitle Text="Date" />
                <ChartCategoryAxisLabels>
                    <ChartCategoryAxisLabelsRotation Angle="45" />
                </ChartCategoryAxisLabels>
            </ChartCategoryAxis>
        </ChartCategoryAxes>
        <ChartValueAxes>
            <ChartValueAxis>
                <ChartValueAxisTitle Text="Interactions" />
                <ChartValueAxisLabels Format="{0}" />
            </ChartValueAxis>
        </ChartValueAxes>

        <ChartTitle Text="Interactions Per Day" />
        <ChartZoomable Enabled="true">
            <ChartZoomableMousewheel Enabled="true" Rate="0.3" Lock="@ChartAxisLock.Y"/>
            <ChartZoomableSelection Enabled="true" Key="@ChartZoomableSelectionKey.Ctrl" Lock="@ChartAxisLock.Y"/>
        </ChartZoomable>
        <ChartPannable Enabled="true" />

        <ChartSettings>
            @* No data template *@
            <NoDataTemplate>
                <div><span style="font-size: 50px;">🔎</span><p><strong>No data available to display at this time range.</strong></p></div>
            </NoDataTemplate>
        </ChartSettings>
    </TelerikChart>
</div>

@* Line chart: Average viewing duration per day *@
<div class="d-flex justify-content-end mb-2">
    <ChartExportMenu TargetElement="@chart2Ref" />
</div>
<div class="chart-container mb-5" style="position: relative;" @ref="@chart2Ref">
    <TelerikChart>
        <ChartSeriesItems>
            <ChartSeries Type="ChartSeriesType.Line"
                         Name="Average Duration"
                         Data="@avgDurationPerDay"
                         Field="Value"
                         CategoryField="Label"
                         Color="#7C40FF" >
                <ChartSeriesTooltip Visible="true" />
            </ChartSeries>
        </ChartSeriesItems>
        <ChartCategoryAxes>
            <ChartCategoryAxis>
                <ChartCategoryAxisTitle Text="Date" />
                <ChartCategoryAxisLabels>
                    <ChartCategoryAxisLabelsRotation Angle="45" />
                </ChartCategoryAxisLabels>
            </ChartCategoryAxis>
        </ChartCategoryAxes>
        <ChartValueAxes>
            <ChartValueAxis>
                <ChartValueAxisTitle Text="Average Duration (seconds)" />
            </ChartValueAxis>
        </ChartValueAxes>

        <ChartTitle Text="Average Viewing Duration Per Day (seconds)" />
        <ChartZoomable Enabled="true">
            <ChartZoomableMousewheel Enabled="true" Rate="0.3" Lock="@ChartAxisLock.Y" />
            <ChartZoomableSelection Enabled="true" Key="@ChartZoomableSelectionKey.Ctrl" Lock="@ChartAxisLock.Y" />
        </ChartZoomable>
        <ChartPannable Enabled="true" />

        <ChartSettings>
            @* No data template *@
            <NoDataTemplate>
                <div><span style="font-size: 50px;">🔎</span><p><strong>No data available to display at this time range.</strong></p></div>
            </NoDataTemplate>
        </ChartSettings>
    </TelerikChart>
</div>

@* Bar chart: Interaction count by tv unit *@
<div class="d-flex justify-content-end mb-2">
    <ChartExportMenu TargetElement="@chart3Ref" />
</div>
<div class="chart-container mb-5" style="position: relative;" @ref="@chart3Ref">
    <TelerikChart>
        <ChartSeriesItems>
            <ChartSeries Type="ChartSeriesType.Column"
                         Name="Left"
                         
                         Data="@interactionsByUnit.Where(x => x.Label == "Left")"
                         Field="Value"
                         CategoryField="Label"
                         Color="#4e79a7" />
            <ChartSeries Type="ChartSeriesType.Column"
                         Name="Center"
                         Data="@interactionsByUnit.Where(x => x.Label == "Center")"
                         Field="Value"
                         CategoryField="Label"
                         Color="#f28e2b" />
            <ChartSeries Type="ChartSeriesType.Column"
                         Name="Right"
                         Data="@interactionsByUnit.Where(x => x.Label == "Right")"
                         Field="Value"
                         CategoryField="Label"
                         Color="#76b7b2" />
        </ChartSeriesItems>
        <ChartCategoryAxes>
            <ChartCategoryAxis>
                <ChartCategoryAxisTitle Text="TV Position" />
            </ChartCategoryAxis>
        </ChartCategoryAxes>
        <ChartValueAxes>
            <ChartValueAxis>
                <ChartValueAxisTitle Text="Interactions" />
            </ChartValueAxis>
        </ChartValueAxes>

        <ChartTitle Text="Interaction Count by TV Unit" />
        <ChartLegend Position="ChartLegendPosition.Top" />
        <ChartTooltip Visible="true" />

        <ChartSettings>
            @* No data template *@
            <NoDataTemplate>
                <div><span style="font-size: 50px;">🔎</span><p><strong>No data available to display at this time range.</strong></p></div>
            </NoDataTemplate>
        </ChartSettings>
    </TelerikChart>
</div>


@* Bar + Line combo chart: Interactions and average viewing duration *@
<div class="d-flex justify-content-end mb-2">
    <ChartExportMenu TargetElement="@comboChartRef" />
</div>
<div class="chart-container mb-5" style="position: relative;" @ref="@comboChartRef">
<TelerikChart>
    <ChartSeriesItems>
        <ChartSeries Type="ChartSeriesType.Column"
                     Name="Average Duration"
                     Data="@comboData"
                     Field="AvgDuration"
                     CategoryField="Label"
                         Color="#287BBF" />
            
        <ChartSeries Type="ChartSeriesType.Line"
                     Name="Interactions"
                     Data="@comboData"
                     Field="Interactions"
                     CategoryField="Label"
                         Color="#2BF0D6"
                     Axis="interactionsAxis" />
    </ChartSeriesItems>

    <ChartValueAxes>
            <ChartValueAxis Color="#287BBF">
            <ChartValueAxisTitle Text="Average Duration (seconds)" />
        </ChartValueAxis>
            <ChartValueAxis Name="interactionsAxis" Color="#10D8BD">
            <ChartValueAxisTitle Text="Interaction Count" />
            
        </ChartValueAxis>
    </ChartValueAxes>

    <ChartCategoryAxes>
        <ChartCategoryAxis Categories="@comboData.Select(x => x.Label).ToArray()" AxisCrossingValue="@crossingValues">
            <ChartCategoryAxisTitle Text="Date" />
                <ChartCategoryAxisLabels>
                    <ChartCategoryAxisLabelsRotation Angle="45" />
                </ChartCategoryAxisLabels>
        </ChartCategoryAxis>
    </ChartCategoryAxes>

    <ChartLegend Position="ChartLegendPosition.Top" />
    <ChartTooltip Visible="true" />
    <ChartTitle Text="Interactions and The Average Viewing Duration" />

    <ChartZoomable Enabled="true">
            <ChartZoomableMousewheel Enabled="true" Rate="0.3" Lock="@ChartAxisLock.Y" />
        <ChartZoomableSelection Enabled="true" Key="@ChartZoomableSelectionKey.Ctrl" Lock="@ChartAxisLock.Y" />
    </ChartZoomable>
    <ChartPannable Enabled="true" />

    <ChartSettings>
        @* No data template *@
        <NoDataTemplate>
            <div><span style="font-size: 50px;">🔎</span><p><strong>No data available to display at this time range.</strong></p></div>
        </NoDataTemplate>
    </ChartSettings>
</TelerikChart>
</div>


@* Heatmap *@
<div class="d-flex justify-content-end mb-2">
    <ChartExportMenu TargetElement="@heatmapRef" />
</div>
<div class="chart-container mb-5" style="position: relative;" @ref="@heatmapRef">

    <TelerikChart Width="100%" Height="400px">
        <ChartTitle Text="Peak Viewing Hours by Day (Number of interactions by hour of each day)" />
        <ChartLegend Position="@ChartLegendPosition.Bottom" />

        <ChartSeriesItems>
            <ChartSeries Type="ChartSeriesType.Heatmap"
                         Name="Interactions"
                         Color="#99ff94"
                         Data="@heatmapData"
                         XField="@nameof(HeatmapData.Hour)"
                         YField="@nameof(HeatmapData.Day)"
                         Field="@nameof(HeatmapData.Value)"
                         ColorField="@nameof(HeatmapData.Color)">
                <ChartSeriesTooltip Visible="true">
                    <Template>
                        @{
                            var item = context.DataItem as HeatmapData;
                        }
                        <div>
                            @($"{item?.Value} interactions on {item?.Day} at {item?.Hour}:00")
                        </div>
                    </Template>
                </ChartSeriesTooltip>
                <ChartSeriesMarkers Type="ChartSeriesMarkersType.RoundedRect" BorderRadius="4" />
            </ChartSeries>
        </ChartSeriesItems>

        <ChartXAxes>
            <ChartXAxis>
                <ChartXAxisTitle Text="Hour of Day (24-hour)" />
                <ChartXAxisLabels Step="1" Format="HH" />
            </ChartXAxis>

        </ChartXAxes>

        <ChartYAxes>
            <ChartYAxis Categories="@yAxisCategories">
                <ChartYAxisTitle Text="Day of Week" />
            </ChartYAxis>
        </ChartYAxes>
        
        <ChartSettings>
            @* No data template *@
            <NoDataTemplate>
                <div><span style="font-size: 50px;">🔎</span><p><strong>No data available to display at this time range.</strong></p></div>
            </NoDataTemplate>
        </ChartSettings>
    </TelerikChart>
</div>

@code {
    private int totalInteractions;
    private double avgDuration;
    private bool IncludeZeroDates { get; set; } = false; // For include dates with zero interaction
    private ElementReference chart1Ref; // For charts display
    private ElementReference chart2Ref;
    private ElementReference chart3Ref;
    private ElementReference comboChartRef;
    private ElementReference heatmapRef;
    private int? selectedPlantId; // For plant filter
    private int? selectedLocationId; // For location filter
    private List<TV_Plant> plants = new();
    private List<TV_Location> locations = new();

    public class ChartPoint { public string Label { get; set; } public double Value { get; set; } }
    public class ComboChartPoint { public string Label { get; set; } public double Interactions { get; set; } public double AvgDuration { get; set; } }
    public class HeatmapData { public int Hour { get; set; } public string Day { get; set; } public int Value { get; set; } public string Color { get; set; } }
    public object[] crossingValues = new object[] { 0, int.MaxValue }; // For combo chart

    private List<ChartPoint> interactionsPerDay = new();
    private List<ChartPoint> avgDurationPerDay = new();
    private List<ChartPoint> interactionsByUnit = new();
    private List<ComboChartPoint> comboData = new();
    private List<HeatmapData> heatmapData = new();
    object[] yAxisCategories = new object[] { "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun" };

    private string selectedPreset = "24h"; // Default time preset
    private DateTime? customStart = DateTime.Now.AddHours(-24);
    private DateTime? customEnd = DateTime.Now;
    private DateTime? filterStart => selectedPreset == "custom" ? customStart : CalculatePresetStart();
    private DateTime? filterEnd => selectedPreset == "custom" ? customEnd : DateTime.Now;
    public class PresetOption { public string Label { get; set; } public string Value { get; set; } }

    private List<PresetOption> presetOptions = new()
    {
        new() { Label = "Last 24 Hours", Value = "24h" },
        new() { Label = "Last 7 Days", Value = "7days" },
        new() { Label = "Last 14 Days", Value = "14days" },
        new() { Label = "Last 30 Days", Value = "30days" },
        new() { Label = "Custom Range", Value = "custom" }
    };

    private Task OnPresetChanged(object value)
    {
        selectedPreset = value?.ToString();
        return Task.CompletedTask;
    }

    private DateTime? CalculatePresetStart() => selectedPreset switch
    {
        "24h" => DateTime.Now.AddHours(-24),
        "7days" => DateTime.Now.AddHours(-168),
        "14days" => DateTime.Now.AddHours(-336),
        "30days" => DateTime.Now.AddHours(-720),
        _ => null
    };

    // When plant is changed, location will reset and change too (In filter)
    private async Task OnPlantChanged(int? plantId)
    {

        selectedPlantId = plantId;

        if (plantId.HasValue)
        {
            locations = await _context.TV_Locations
                .Where(l => l.PlantID == plantId)
                .ToListAsync();
            selectedLocationId = null;
        }
        else
        {
            locations = new();
            selectedLocationId = null;
        }
    }

    private List<DateTime> GetDateRange(DateTime start, DateTime end)
    {
        var list = new List<DateTime>();
        for (var date = start.Date; date <= end.Date; date = date.AddDays(1))
            list.Add(date);
        return list;
    }

    private EventCallback<bool> ValueChangedCallback =>
        EventCallback.Factory.Create<bool>(this, OnIncludeZeroDatesChanged);

    private async Task OnIncludeZeroDatesChanged(bool value)
    {
        IncludeZeroDates = value;
        await LoadChartsAsync();
    }

    // Load charts based on filter logic
    private async Task LoadChartsAsync()
    {

        var query = _context.TV_Interactions
            .Include(i => i.Unit)
            .ThenInclude(u => u.Location)
            .AsQueryable();

        if (selectedLocationId.HasValue)
            query = query.Where(i => i.Unit.LocationID == selectedLocationId.Value);
        else if (selectedPlantId.HasValue)
            query = query.Where(i => i.Unit.Location.PlantID == selectedPlantId.Value);

        if (filterStart.HasValue)
            query = query.Where(i => i.StartTime >= filterStart.Value);
        if (filterEnd.HasValue)
            query = query.Where(i => i.StartTime <= filterEnd.Value);

        // Cards
        totalInteractions = await query.CountAsync();
        avgDuration = await query.AverageAsync(i => (double?)i.Duration) ?? 0;

        // Line chart - Interactions per day
        var interactionData = await query
            .GroupBy(i => i.StartTime.Date)
            .Select(g => new { Date = g.Key, Count = g.Count() })
            .ToListAsync();

                if (IncludeZeroDates)
                {
                    var allDates = GetDateRange(filterStart!.Value, filterEnd!.Value);

                    interactionsPerDay = allDates
                        .Select(date =>
                        {
                            var match = interactionData.FirstOrDefault(d => d.Date == date);
                            return new ChartPoint
                            {
                                Label = date.ToString("dd/MM"),
                                Value = match?.Count ?? 0
                            };
                        })
                        .ToList();
                }
                else
                {
                    interactionsPerDay = interactionData
                        .Select(d => new ChartPoint
                        {
                            Label = d.Date.ToString("dd/MM"),
                            Value = d.Count
                        })
                        .ToList();
                }


        // Line chart - Average viewing duration per day
        var durationData = await query
            .GroupBy(i => i.StartTime.Date)
            .Select(g => new { Date = g.Key, Avg = g.Average(x => (double)x.Duration) }) // Avg = g.Average(x => (double)x.Duration) / 60.0 --> Convert to Minutes
            .ToListAsync();

                if (IncludeZeroDates)
                {
                    var allDates = GetDateRange(filterStart!.Value, filterEnd!.Value);

                    avgDurationPerDay = allDates
                        .Select(date =>
                        {
                            var match = durationData.FirstOrDefault(d => d.Date == date);
                            return new ChartPoint
                            {
                        Label = date.ToString("dd/MM"),
                                Value = match != null ? Math.Round(match.Avg, 2) : 0
                            };
                        })
                        .ToList();
                }
                else
                {
                    avgDurationPerDay = durationData
                        .Select(d => new ChartPoint
                        {
                            Label = d.Date.ToString("dd/MM"),
                            Value = Math.Round(d.Avg, 2)
                        })
                        .ToList();
                }


        // Bar chart - Interaction count per tv unit
        interactionsByUnit = await (
            from i in query
            join u in _context.TV_Units on i.UnitID equals u.UnitID
            group i by u.TvPosition into g
            select new ChartPoint { Label = g.Key, Value = g.Count() })
            .ToListAsync();
            
        // Bar + Line chart - Avg viewing duration and interactions

        var comboRaw = await query
        .GroupBy(i => i.StartTime.Date)
        .Select(g => new
        {
            Date = g.Key,
            Interactions = g.Count(),
            AvgDuration = g.Average(x => (double)x.Duration) //Convert to minutes --> AvgDuration = g.Average(x => (double)x.Duration) / 60.0
        })
        .ToListAsync();

                if (IncludeZeroDates)
                {
                    var allDates = GetDateRange(filterStart!.Value, filterEnd!.Value);

                    comboData = allDates.Select(date =>
                    {
                        var match = comboRaw.FirstOrDefault(d => d.Date == date);
                        return new ComboChartPoint
                        {
                            Label = date.ToString("dd/MM"),
                            Interactions = match?.Interactions ?? 0,
                            AvgDuration = match != null ? Math.Round(match.AvgDuration, 2) : 0
                        };
                    }).ToList();
                }
                else
                {
                    comboData = comboRaw
                        .Select(d => new ComboChartPoint
                        {
                            Label = d.Date.ToString("dd/MM"),
                            Interactions = d.Interactions,
                            AvgDuration = Math.Round(d.AvgDuration, 2)
                        })
                        .ToList();
                }

        // Heatmap
        await LoadHeatmapAsync();

    }

    // Heatmap colours
    private string GetHeatColor(int value)
    {
        if (value <= 10) return "#D5FFD3";
        else if (value <= 20) return "#A7FFA2";
        else if (value <= 30) return "#66FF5D";
        else return "#0FFD01";
    }

     // Heatmap logic
    private async Task LoadHeatmapAsync()
    {
        var query = _context.TV_Interactions.AsQueryable();

        if (selectedLocationId.HasValue)
            query = query.Where(i => i.Unit.LocationID == selectedLocationId.Value);
        else if (selectedPlantId.HasValue)
            query = query.Where(i => i.Unit.Location.PlantID == selectedPlantId.Value);

        if (filterStart.HasValue)
            query = query.Where(i => i.StartTime >= filterStart.Value);
        if (filterEnd.HasValue)
            query = query.Where(i => i.StartTime <= filterEnd.Value);

        var data = await query.ToListAsync();

        var grouped = data
            .GroupBy(i => new { i.StartTime.Hour, Day = i.StartTime.DayOfWeek.ToString().Substring(0, 3) })
            .Select(g =>
            {
                var count = g.Count();
                return new HeatmapData
                {
                    Hour = g.Key.Hour,
                    Day = g.Key.Day,
                    Value = count,
                    Color = GetHeatColor(count)
                };
            });

        heatmapData = grouped
            .OrderBy(d => d.Hour)   // Ensure hours are ordered left to right from start to end of day (Based on DB data)
            .ToList();
    }

    // Card's value colours. The colour value can be changed in MainLayout.razor
    private string GetColorClass(double value, double lowThreshold, double highThreshold)
    {
        if (value < lowThreshold)
            return "value-low";
        else if (value < highThreshold)
            return "value-medium";
        else
            return "value-high";
    }

    // Main
    protected override async Task OnInitializedAsync()
    {
        plants = await _context.TV_Plants.ToListAsync();

        // Default: Plant = PN1
        var defaultPlant = plants.FirstOrDefault(p => p.Plant == "PN1");
        if (defaultPlant != null)
        {
            selectedPlantId = defaultPlant.PlantID;

            await OnPlantChanged(selectedPlantId); // Populate locations & clear previous location

            // Default: Location = Ground Floor Office
            var defaultLocation = locations.FirstOrDefault(l => l.Location == "Ground Floor Office");
            if (defaultLocation != null)
            {
                selectedLocationId = defaultLocation.LocationID;
            }
        }
        await LoadChartsAsync();
    }
}
